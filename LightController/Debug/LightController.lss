
LightController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000003be  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800062  00800062  00000454  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a9  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000422  00000000  00000000  00000aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000047d  00000000  00000000  00000ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a6  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d3  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001869  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	4d c0       	rjmp	.+154    	; 0xa8 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	1a c0       	rjmp	.+52     	; 0x48 <__vector_9>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ee eb       	ldi	r30, 0xBE	; 190
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a2 36       	cpi	r26, 0x62	; 98
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a2 e6       	ldi	r26, 0x62	; 98
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 37       	cpi	r26, 0x7A	; 122
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	41 d1       	rcall	.+642    	; 0x2c6 <main>
  44:	ba c1       	rjmp	.+884    	; 0x3ba <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_9>:


//Free running ADC interrupt;

ISR(ADC_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	2f 93       	push	r18
  54:	3f 93       	push	r19
  56:	8f 93       	push	r24
  58:	ef 93       	push	r30
  5a:	ff 93       	push	r31
	static unsigned char inputIndex=0;
	//Read the AD conversion result;
	adcScanningData[inputIndex]=ADCW;
  5c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  60:	e8 2f       	mov	r30, r24
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	24 b1       	in	r18, 0x04	; 4
  66:	35 b1       	in	r19, 0x05	; 5
  68:	ee 0f       	add	r30, r30
  6a:	ff 1f       	adc	r31, r31
  6c:	ec 58       	subi	r30, 0x8C	; 140
  6e:	ff 4f       	sbci	r31, 0xFF	; 255
  70:	31 83       	std	Z+1, r19	; 0x01
  72:	20 83       	st	Z, r18
	//Select next ADC input;
	if (++inputIndex > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
  74:	8f 5f       	subi	r24, 0xFF	; 255
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	18 f4       	brcc	.+6      	; 0x80 <__vector_9+0x38>
  7a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__vector_9+0x3c>
	inputIndex = 0;
  80:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+inputIndex;
  84:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  88:	8f 5f       	subi	r24, 0xFF	; 255
  8a:	87 b9       	out	0x07, r24	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	8a 95       	dec	r24
  90:	f1 f7       	brne	.-4      	; 0x8e <__vector_9+0x46>
	//Delay needed for the stabilization of the ADC input voltage;
	_delay_us(10);
	//Start the AD conversion;
	ADCSRA|=(1<<ADSC); //ADCSRA|=0x40
  92:	36 9a       	sbi	0x06, 6	; 6
}
  94:	ff 91       	pop	r31
  96:	ef 91       	pop	r30
  98:	8f 91       	pop	r24
  9a:	3f 91       	pop	r19
  9c:	2f 91       	pop	r18
  9e:	0f 90       	pop	r0
  a0:	0f be       	out	0x3f, r0	; 63
  a2:	0f 90       	pop	r0
  a4:	1f 90       	pop	r1
  a6:	18 95       	reti

000000a8 <__vector_6>:

//Timer0 compare interrupt;

ISR (TIM0_COMPA_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	//Counter for light switch - is 25 milliseconds;
	const short InterruptDelay = 25;
	static unsigned char acNetCounter = InterruptDelay;
	
	if(AC_SWITCH)
  ba:	b1 9b       	sbis	0x16, 1	; 22
  bc:	0e c0       	rjmp	.+28     	; 0xda <__vector_6+0x32>
	{
		//Read 1 state - switch is active;
		//Time checking;
		if(acNetCounter)
  be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  c2:	88 23       	and	r24, r24
  c4:	21 f0       	breq	.+8      	; 0xce <__vector_6+0x26>
		{
			//Time is not run;
			acNetCounter--;
  c6:	81 50       	subi	r24, 0x01	; 1
  c8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  cc:	0c c0       	rjmp	.+24     	; 0xe6 <__vector_6+0x3e>
		}
		else
		{
			//15 mseconds switch is on;
			keyFlag = 0;
  ce:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <keyFlag>
			//Set the counter again;
			acNetCounter = InterruptDelay;
  d2:	89 e1       	ldi	r24, 0x19	; 25
  d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <__vector_6+0x3e>
		}
	}
	else
	{
		//Read 0 - Switch is on;
		keyFlag = 1;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <keyFlag>
		//Set the counter again;
		acNetCounter = InterruptDelay;
  e0:	89 e1       	ldi	r24, 0x19	; 25
  e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	}
	//Start with switch / debounnce;
	if (keyFlag)
  e6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <keyFlag>
  ea:	88 23       	and	r24, r24
  ec:	09 f4       	brne	.+2      	; 0xf0 <__vector_6+0x48>
  ee:	69 c0       	rjmp	.+210    	; 0x1c2 <__vector_6+0x11a>
	{
		timeCounter++;
  f0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <timeCounter>
  f4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <timeCounter+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x1>
  fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter>

		if (timeCounter >= DEBOUNCE)
 102:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <timeCounter>
 106:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <timeCounter+0x1>
 10a:	80 3d       	cpi	r24, 0xD0	; 208
 10c:	97 40       	sbci	r25, 0x07	; 7
 10e:	08 f4       	brcc	.+2      	; 0x112 <__vector_6+0x6a>
 110:	6c c0       	rjmp	.+216    	; 0x1ea <__vector_6+0x142>
		{
			timeCounter = DEBOUNCE;
 112:	80 ed       	ldi	r24, 0xD0	; 208
 114:	97 e0       	ldi	r25, 0x07	; 7
 116:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <timeCounter+0x1>
 11a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <timeCounter>
			milliSeconds++;
 11e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <milliSeconds>
 122:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <milliSeconds+0x1>
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <milliSeconds+0x1>
 12c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <milliSeconds>

			if (milliSeconds == MILLISECONDS_IN_SECONDS)
 130:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <milliSeconds>
 134:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <milliSeconds+0x1>
 138:	87 3e       	cpi	r24, 0xE7	; 231
 13a:	93 40       	sbci	r25, 0x03	; 3
 13c:	09 f0       	breq	.+2      	; 0x140 <__vector_6+0x98>
 13e:	55 c0       	rjmp	.+170    	; 0x1ea <__vector_6+0x142>
			{
				milliSeconds = 0;
 140:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <milliSeconds+0x1>
 144:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <milliSeconds>
				seconds++;
 148:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <seconds>
 14c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <seconds+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <seconds+0x1>
 156:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <seconds>

				if (seconds == SECONDS_IN_MINUTES)
 15a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <seconds>
 15e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <seconds+0x1>
 162:	cb 97       	sbiw	r24, 0x3b	; 59
 164:	09 f0       	breq	.+2      	; 0x168 <__vector_6+0xc0>
 166:	41 c0       	rjmp	.+130    	; 0x1ea <__vector_6+0x142>
				{
					seconds = 0;
 168:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <seconds+0x1>
 16c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <seconds>
					minutes++;
 170:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <minutes>
 174:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <minutes+0x1>
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <minutes+0x1>
 17e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <minutes>

					if (minutes == MINUTES_IN_HOURS)
 182:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <minutes>
 186:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <minutes+0x1>
 18a:	cb 97       	sbiw	r24, 0x3b	; 59
 18c:	71 f5       	brne	.+92     	; 0x1ea <__vector_6+0x142>
					{
						minutes = 0;
 18e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <minutes+0x1>
 192:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <minutes>
						hours++;
 196:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <hours>
 19a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <hours+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <hours+0x1>
 1a4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <hours>
					
						if (hours > AC_SWITCHOFF_DELAY)
 1a8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <hours>
 1ac:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <hours+0x1>
 1b0:	06 97       	sbiw	r24, 0x06	; 6
 1b2:	d8 f0       	brcs	.+54     	; 0x1ea <__vector_6+0x142>
						{
							hours=CONSTANT_FOR_HOURS;
 1b4:	87 e0       	ldi	r24, 0x07	; 7
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <hours+0x1>
 1bc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <hours>
 1c0:	14 c0       	rjmp	.+40     	; 0x1ea <__vector_6+0x142>
			}
		}
	}
	else
	{
		milliSeconds = 0; 
 1c2:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <milliSeconds+0x1>
 1c6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <milliSeconds>
		seconds = 0;
 1ca:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <seconds+0x1>
 1ce:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <seconds>
		minutes = 0;
 1d2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <minutes+0x1>
 1d6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <minutes>
		hours = 0; 
 1da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <hours+0x1>
 1de:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <hours>
		timeCounter = 0;  
 1e2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <timeCounter+0x1>
 1e6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <timeCounter>
	}

	//Switch on delay and Pir sensor debounce;
	if ((!(PIR_STATUS)) && (keyFlag == 0) && (photoSeensor >= sensivity))
 1ea:	b0 99       	sbic	0x16, 0	; 22
 1ec:	19 c0       	rjmp	.+50     	; 0x220 <__vector_6+0x178>
 1ee:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <keyFlag>
 1f2:	81 11       	cpse	r24, r1
 1f4:	15 c0       	rjmp	.+42     	; 0x220 <__vector_6+0x178>
 1f6:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <photoSeensor>
 1fa:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <photoSeensor+0x1>
 1fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sensivity>
 202:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sensivity+0x1>
 206:	28 17       	cp	r18, r24
 208:	39 07       	cpc	r19, r25
 20a:	50 f0       	brcs	.+20     	; 0x220 <__vector_6+0x178>
			on++;
 20c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <on>
 210:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <on+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <on+0x1>
 21a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <on>
 21e:	04 c0       	rjmp	.+8      	; 0x228 <__vector_6+0x180>
	else	on=0;
 220:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <on+0x1>
 224:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <on>
	
	if ((!(PIR_STATUS)) && (photoSeensor < sensivity) && (BULB_STATUS))
 228:	b0 99       	sbic	0x16, 0	; 22
 22a:	17 c0       	rjmp	.+46     	; 0x25a <__vector_6+0x1b2>
 22c:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <photoSeensor>
 230:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <photoSeensor+0x1>
 234:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sensivity>
 238:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sensivity+0x1>
 23c:	28 17       	cp	r18, r24
 23e:	39 07       	cpc	r19, r25
 240:	60 f4       	brcc	.+24     	; 0x25a <__vector_6+0x1b2>
 242:	b3 9b       	sbis	0x16, 3	; 22
 244:	0a c0       	rjmp	.+20     	; 0x25a <__vector_6+0x1b2>
			timeCounterDown++;
 246:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <timeCounterDown>
 24a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <timeCounterDown+0x1>
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <timeCounterDown+0x1>
 254:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <timeCounterDown>
 258:	04 c0       	rjmp	.+8      	; 0x262 <__vector_6+0x1ba>
	else    timeCounterDown = 0;
 25a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <timeCounterDown+0x1>
 25e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <timeCounterDown>
	//Reset the counter;
	TCNT0=0x00;
 262:	12 be       	out	0x32, r1	; 50
}
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <McuInit>:

void McuInit (void)
{
	//Crystal Oscillator division factor: 1;
	#pragma optsize-
	CLKPR=(1<<CLKPCE);
 276:	80 e8       	ldi	r24, 0x80	; 128
 278:	86 bd       	out	0x26, r24	; 38
	CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
 27a:	16 bc       	out	0x26, r1	; 38
	#endif

	//Input/Output Ports initialization;
	//Port B initialization;
	//Function: Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In;
	DDRB=(0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	87 bb       	out	0x17, r24	; 23
	// State: Bit5=T Bit4=P Bit3=1 Bit2=T Bit1=P Bit0=T;
	PORTB=(0<<PORTB5) | (1<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
 280:	83 e1       	ldi	r24, 0x13	; 19
 282:	88 bb       	out	0x18, r24	; 24
	//ADC initialization;
	//ADC Clock frequency: 150,000 kHz;
	//ADC Bandgap Voltage Reference: Off;
	//ADC Auto Trigger Source: Free Running;
	//Digital input buffers on ADC0: On, ADC1: On, ADC2: On, ADC3: On;
	DIDR0=(0<<ADC0D) | (0<<ADC2D) | (0<<ADC3D) | (0<<ADC1D);
 284:	14 ba       	out	0x14, r1	; 20
	ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	87 b9       	out	0x07, r24	; 7
	ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
 28a:	8e ee       	ldi	r24, 0xEE	; 238
 28c:	86 b9       	out	0x06, r24	; 6
	ADCSRB=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
 28e:	13 b8       	out	0x03, r1	; 3
	//Timer/Counter 0 initialization;
	//Clock source: System Clock;
	//Clock value: 150,000 kHz;
	//Mode: CTC top=OCR0A;
	//Timer Period: 1 ms;
	TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (1<<WGM01) | (0<<WGM00);
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	8f bd       	out	0x2f, r24	; 47
	TCCR0B=(0<<WGM02) | (0<<CS02) | (1<<CS01) | (1<<CS00);
 294:	83 e0       	ldi	r24, 0x03	; 3
 296:	83 bf       	out	0x33, r24	; 51
	TCNT0=0x00;
 298:	12 be       	out	0x32, r1	; 50
	OCR0A=0x95;
 29a:	85 e9       	ldi	r24, 0x95	; 149
 29c:	86 bf       	out	0x36, r24	; 54
	OCR0B=0x00;
 29e:	19 bc       	out	0x29, r1	; 41

	//Timer/Counter 0 Interrupt(s) initialization;
	TIMSK0=(0<<OCIE0B) | (1<<OCIE0A) | (0<<TOIE0);
 2a0:	84 e0       	ldi	r24, 0x04	; 4
 2a2:	89 bf       	out	0x39, r24	; 57

	sei ();
 2a4:	78 94       	sei
 2a6:	08 95       	ret

000002a8 <AdcInputsRead>:
}

void AdcInputsRead (void)
{
	//First channel value, PORTB2;
	photoSeensor = adcScanningData[0];
 2a8:	e4 e7       	ldi	r30, 0x74	; 116
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	91 81       	ldd	r25, Z+1	; 0x01
 2b0:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <photoSeensor+0x1>
 2b4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <photoSeensor>
	//Second channel value, PORTB4;
	sensivity = adcScanningData[1];
 2b8:	82 81       	ldd	r24, Z+2	; 0x02
 2ba:	93 81       	ldd	r25, Z+3	; 0x03
 2bc:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <sensivity+0x1>
 2c0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sensivity>
 2c4:	08 95       	ret

000002c6 <main>:
}


int main(void)
{
	PORTB = 0x00;
 2c6:	18 ba       	out	0x18, r1	; 24
	McuInit();
 2c8:	d6 df       	rcall	.-84     	; 0x276 <McuInit>
	{

		//Switch state
		unsigned char switchOn;
		//Forbid global interrupts;
		cli ();
 2ca:	f8 94       	cli
		switchOn = keyFlag;
 2cc:	c0 91 63 00 	lds	r28, 0x0063	; 0x800063 <keyFlag>
		//Allow global interrupts;
		sei ();
 2d0:	78 94       	sei
		// ADC read function(10bit);
		AdcInputsRead();
 2d2:	ea df       	rcall	.-44     	; 0x2a8 <AdcInputsRead>
		//AC switch priority;
		while (switchOn && (timeCounter >= DEBOUNCE) && (hours < AC_SWITCHOFF_DELAY))
 2d4:	cc 23       	and	r28, r28
 2d6:	e9 f0       	breq	.+58     	; 0x312 <main+0x4c>
 2d8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <timeCounter>
 2dc:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <timeCounter+0x1>
 2e0:	80 3d       	cpi	r24, 0xD0	; 208
 2e2:	97 40       	sbci	r25, 0x07	; 7
 2e4:	b0 f0       	brcs	.+44     	; 0x312 <main+0x4c>
 2e6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <hours>
 2ea:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <hours+0x1>
 2ee:	05 97       	sbiw	r24, 0x05	; 5
 2f0:	08 f4       	brcc	.+2      	; 0x2f4 <main+0x2e>
 2f2:	61 c0       	rjmp	.+194    	; 0x3b6 <main+0xf0>
 2f4:	0e c0       	rjmp	.+28     	; 0x312 <main+0x4c>
 2f6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <timeCounter>
 2fa:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <timeCounter+0x1>
 2fe:	80 3d       	cpi	r24, 0xD0	; 208
 300:	97 40       	sbci	r25, 0x07	; 7
 302:	38 f0       	brcs	.+14     	; 0x312 <main+0x4c>
 304:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <hours>
 308:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <hours+0x1>
 30c:	05 97       	sbiw	r24, 0x05	; 5
 30e:	08 f4       	brcc	.+2      	; 0x312 <main+0x4c>
 310:	50 c0       	rjmp	.+160    	; 0x3b2 <main+0xec>
		{
			BULB_ON;
		}
		
		//PIR=0,Switch=1;
		if ((photoSeensor >= sensivity) && (!(PIR_STATUS))  && (on >= PIRDELAY))
 312:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <photoSeensor>
 316:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <photoSeensor+0x1>
 31a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sensivity>
 31e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sensivity+0x1>
 322:	28 17       	cp	r18, r24
 324:	39 07       	cpc	r19, r25
 326:	58 f0       	brcs	.+22     	; 0x33e <main+0x78>
 328:	b0 99       	sbic	0x16, 0	; 22
 32a:	09 c0       	rjmp	.+18     	; 0x33e <main+0x78>
 32c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <on>
 330:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <on+0x1>
 334:	88 3b       	cpi	r24, 0xB8	; 184
 336:	9b 40       	sbci	r25, 0x0B	; 11
 338:	10 f0       	brcs	.+4      	; 0x33e <main+0x78>
		
		//Out is log 1;
		BULB_ON;
 33a:	c3 9a       	sbi	0x18, 3	; 24
 33c:	c6 cf       	rjmp	.-116    	; 0x2ca <main+0x4>

		else if ((!(PIR_STATUS)) && (photoSeensor < sensivity) && (BULB_STATUS) && (timeCounterDown > PHOTOOFFSET))
 33e:	b0 99       	sbic	0x16, 0	; 22
 340:	16 c0       	rjmp	.+44     	; 0x36e <main+0xa8>
 342:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <photoSeensor>
 346:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <photoSeensor+0x1>
 34a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sensivity>
 34e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sensivity+0x1>
 352:	28 17       	cp	r18, r24
 354:	39 07       	cpc	r19, r25
 356:	58 f4       	brcc	.+22     	; 0x36e <main+0xa8>
 358:	b3 9b       	sbis	0x16, 3	; 22
 35a:	09 c0       	rjmp	.+18     	; 0x36e <main+0xa8>
 35c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <timeCounterDown>
 360:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <timeCounterDown+0x1>
 364:	89 38       	cpi	r24, 0x89	; 137
 366:	93 41       	sbci	r25, 0x13	; 19
 368:	10 f0       	brcs	.+4      	; 0x36e <main+0xa8>

		BULB_OFF;
 36a:	c3 98       	cbi	0x18, 3	; 24
 36c:	ae cf       	rjmp	.-164    	; 0x2ca <main+0x4>
		
		else if ((!(PIR_STATUS)) && (!switchOn || switchOn) && (photoSeensor>=sensivity)  && (BULB_STATUS))
 36e:	b0 99       	sbic	0x16, 0	; 22
 370:	0f c0       	rjmp	.+30     	; 0x390 <main+0xca>
 372:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <photoSeensor>
 376:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <photoSeensor+0x1>
 37a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sensivity>
 37e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sensivity+0x1>
 382:	28 17       	cp	r18, r24
 384:	39 07       	cpc	r19, r25
 386:	20 f0       	brcs	.+8      	; 0x390 <main+0xca>
 388:	b3 9b       	sbis	0x16, 3	; 22
 38a:	02 c0       	rjmp	.+4      	; 0x390 <main+0xca>

		BULB_ON;
 38c:	c3 9a       	sbi	0x18, 3	; 24
 38e:	9d cf       	rjmp	.-198    	; 0x2ca <main+0x4>

		else if (PIR_STATUS && (photoSeensor < sensivity))
 390:	b0 9b       	sbis	0x16, 0	; 22
 392:	0d c0       	rjmp	.+26     	; 0x3ae <main+0xe8>
 394:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <photoSeensor>
 398:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <photoSeensor+0x1>
 39c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sensivity>
 3a0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <sensivity+0x1>
 3a4:	28 17       	cp	r18, r24
 3a6:	39 07       	cpc	r19, r25
 3a8:	10 f4       	brcc	.+4      	; 0x3ae <main+0xe8>
		
		BULB_OFF;
 3aa:	c3 98       	cbi	0x18, 3	; 24
 3ac:	8e cf       	rjmp	.-228    	; 0x2ca <main+0x4>
		
		else BULB_OFF; 
 3ae:	c3 98       	cbi	0x18, 3	; 24
 3b0:	8c cf       	rjmp	.-232    	; 0x2ca <main+0x4>
		// ADC read function(10bit);
		AdcInputsRead();
		//AC switch priority;
		while (switchOn && (timeCounter >= DEBOUNCE) && (hours < AC_SWITCHOFF_DELAY))
		{
			BULB_ON;
 3b2:	c3 9a       	sbi	0x18, 3	; 24
 3b4:	a0 cf       	rjmp	.-192    	; 0x2f6 <main+0x30>
 3b6:	c3 9a       	sbi	0x18, 3	; 24
 3b8:	9e cf       	rjmp	.-196    	; 0x2f6 <main+0x30>

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
